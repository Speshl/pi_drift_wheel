// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package crsf

import (
	"errors"
	"fmt"
)

const (
	// AddressTypeBroadcast is a AddressType of type Broadcast.
	AddressTypeBroadcast AddressType = iota
	// AddressTypeUsb is a AddressType of type Usb.
	AddressTypeUsb AddressType = iota + 15
	// AddressTypeBluetooth is a AddressType of type Bluetooth.
	AddressTypeBluetooth AddressType = iota + 16
	// AddressTypeTbsCore is a AddressType of type TbsCore.
	AddressTypeTbsCore AddressType = iota + 125
	// AddressTypeReserved1 is a AddressType of type Reserved1.
	AddressTypeReserved1 AddressType = iota + 134
	// AddressTypeCurrentSensor is a AddressType of type CurrentSensor.
	AddressTypeCurrentSensor AddressType = iota + 187
	// AddressTypeGps is a AddressType of type Gps.
	AddressTypeGps AddressType = iota + 188
	// AddressTypeBlackBox is a AddressType of type BlackBox.
	AddressTypeBlackBox AddressType = iota + 189
	// AddressTypeFlightController is a AddressType of type FlightController.
	// Most should have this address
	AddressTypeFlightController AddressType = iota + 192
	// AddressTypeReserved2 is a AddressType of type Reserved2.
	AddressTypeReserved2 AddressType = iota + 193
	// AddressTypeRacetag is a AddressType of type Racetag.
	AddressTypeRacetag AddressType = iota + 194
	// AddressTypeRadioTransmitter is a AddressType of type RadioTransmitter.
	AddressTypeRadioTransmitter AddressType = iota + 223
	// AddressTypeReceiver is a AddressType of type Receiver.
	AddressTypeReceiver AddressType = iota + 224
	// AddressTypeTransmitter is a AddressType of type Transmitter.
	// channels should have this address
	AddressTypeTransmitter AddressType = iota + 225
	// AddressTypeElrsLua is a AddressType of type ElrsLua.
	AddressTypeElrsLua
)

var ErrInvalidAddressType = errors.New("not a valid AddressType")

const _AddressTypeName = "BroadcastUsbBluetoothTbsCoreReserved1CurrentSensorGpsBlackBoxFlightControllerReserved2RacetagRadioTransmitterReceiverTransmitterElrsLua"

var _AddressTypeMap = map[AddressType]string{
	AddressTypeBroadcast:        _AddressTypeName[0:9],
	AddressTypeUsb:              _AddressTypeName[9:12],
	AddressTypeBluetooth:        _AddressTypeName[12:21],
	AddressTypeTbsCore:          _AddressTypeName[21:28],
	AddressTypeReserved1:        _AddressTypeName[28:37],
	AddressTypeCurrentSensor:    _AddressTypeName[37:50],
	AddressTypeGps:              _AddressTypeName[50:53],
	AddressTypeBlackBox:         _AddressTypeName[53:61],
	AddressTypeFlightController: _AddressTypeName[61:77],
	AddressTypeReserved2:        _AddressTypeName[77:86],
	AddressTypeRacetag:          _AddressTypeName[86:93],
	AddressTypeRadioTransmitter: _AddressTypeName[93:109],
	AddressTypeReceiver:         _AddressTypeName[109:117],
	AddressTypeTransmitter:      _AddressTypeName[117:128],
	AddressTypeElrsLua:          _AddressTypeName[128:135],
}

// String implements the Stringer interface.
func (x AddressType) String() string {
	if str, ok := _AddressTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AddressType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AddressType) IsValid() bool {
	_, ok := _AddressTypeMap[x]
	return ok
}

var _AddressTypeValue = map[string]AddressType{
	_AddressTypeName[0:9]:     AddressTypeBroadcast,
	_AddressTypeName[9:12]:    AddressTypeUsb,
	_AddressTypeName[12:21]:   AddressTypeBluetooth,
	_AddressTypeName[21:28]:   AddressTypeTbsCore,
	_AddressTypeName[28:37]:   AddressTypeReserved1,
	_AddressTypeName[37:50]:   AddressTypeCurrentSensor,
	_AddressTypeName[50:53]:   AddressTypeGps,
	_AddressTypeName[53:61]:   AddressTypeBlackBox,
	_AddressTypeName[61:77]:   AddressTypeFlightController,
	_AddressTypeName[77:86]:   AddressTypeReserved2,
	_AddressTypeName[86:93]:   AddressTypeRacetag,
	_AddressTypeName[93:109]:  AddressTypeRadioTransmitter,
	_AddressTypeName[109:117]: AddressTypeReceiver,
	_AddressTypeName[117:128]: AddressTypeTransmitter,
	_AddressTypeName[128:135]: AddressTypeElrsLua,
}

// ParseAddressType attempts to convert a string to a AddressType.
func ParseAddressType(name string) (AddressType, error) {
	if x, ok := _AddressTypeValue[name]; ok {
		return x, nil
	}
	return AddressType(0), fmt.Errorf("%s is %w", name, ErrInvalidAddressType)
}

const (
	// FrameTypeGPS is a FrameType of type GPS.
	FrameTypeGPS FrameType = iota + 2
	// FrameTypeVario is a FrameType of type Vario.
	FrameTypeVario FrameType = iota + 6
	// FrameTypeBatterySensor is a FrameType of type BatterySensor.
	FrameTypeBatterySensor
	// FrameTypeBarometer is a FrameType of type Barometer.
	FrameTypeBarometer
	// FrameTypeLinkStats is a FrameType of type LinkStats.
	FrameTypeLinkStats FrameType = iota + 16
	// FrameTypeChannels is a FrameType of type Channels.
	FrameTypeChannels FrameType = iota + 17
	// FrameTypeLinkRx is a FrameType of type LinkRx.
	FrameTypeLinkRx FrameType = iota + 22
	// FrameTypeLinkTx is a FrameType of type LinkTx.
	FrameTypeLinkTx
	// FrameTypeAttitude is a FrameType of type Attitude.
	FrameTypeAttitude
	// FrameTypeFlightMode is a FrameType of type FlightMode.
	FrameTypeFlightMode FrameType = iota + 24
)

var ErrInvalidFrameType = errors.New("not a valid FrameType")

const _FrameTypeName = "GPSVarioBatterySensorBarometerLinkStatsChannelsLinkRxLinkTxAttitudeFlightMode"

var _FrameTypeMap = map[FrameType]string{
	FrameTypeGPS:           _FrameTypeName[0:3],
	FrameTypeVario:         _FrameTypeName[3:8],
	FrameTypeBatterySensor: _FrameTypeName[8:21],
	FrameTypeBarometer:     _FrameTypeName[21:30],
	FrameTypeLinkStats:     _FrameTypeName[30:39],
	FrameTypeChannels:      _FrameTypeName[39:47],
	FrameTypeLinkRx:        _FrameTypeName[47:53],
	FrameTypeLinkTx:        _FrameTypeName[53:59],
	FrameTypeAttitude:      _FrameTypeName[59:67],
	FrameTypeFlightMode:    _FrameTypeName[67:77],
}

// String implements the Stringer interface.
func (x FrameType) String() string {
	if str, ok := _FrameTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FrameType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FrameType) IsValid() bool {
	_, ok := _FrameTypeMap[x]
	return ok
}

var _FrameTypeValue = map[string]FrameType{
	_FrameTypeName[0:3]:   FrameTypeGPS,
	_FrameTypeName[3:8]:   FrameTypeVario,
	_FrameTypeName[8:21]:  FrameTypeBatterySensor,
	_FrameTypeName[21:30]: FrameTypeBarometer,
	_FrameTypeName[30:39]: FrameTypeLinkStats,
	_FrameTypeName[39:47]: FrameTypeChannels,
	_FrameTypeName[47:53]: FrameTypeLinkRx,
	_FrameTypeName[53:59]: FrameTypeLinkTx,
	_FrameTypeName[59:67]: FrameTypeAttitude,
	_FrameTypeName[67:77]: FrameTypeFlightMode,
}

// ParseFrameType attempts to convert a string to a FrameType.
func ParseFrameType(name string) (FrameType, error) {
	if x, ok := _FrameTypeValue[name]; ok {
		return x, nil
	}
	return FrameType(0), fmt.Errorf("%s is %w", name, ErrInvalidFrameType)
}
